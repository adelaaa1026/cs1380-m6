{"type":"object","id":0,"value":{"url":{"type":"string","value":"https://github.com/prisma/prisma"},"repo_id":{"type":"string","value":"prisma/prisma"},"readme":{"type":"string","value":"![Prisma](https://i.imgur.com/h6UIYTu.png)\n\n<div align=\"center\">\n  <h1>Prisma</h1>\n  <a href=\"https://www.npmjs.com/package/prisma\"><img src=\"https://img.shields.io/npm/v/prisma.svg?style=flat\" /></a>\n  <a href=\"https://github.com/prisma/prisma/blob/main/CONTRIBUTING.md\"><img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\" /></a>\n  <a href=\"https://github.com/prisma/prisma/blob/main/LICENSE\"><img src=\"https://img.shields.io/badge/license-Apache%202-blue\" /></a>\n  <a href=\"https://pris.ly/discord\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/937751382725886062?label=Discord\"></a>\n  <br />\n  <br />\n  <a href=\"https://www.prisma.io/docs/getting-started/quickstart\">Quickstart</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://www.prisma.io/\">Website</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://www.prisma.io/docs/\">Docs</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://github.com/prisma/prisma-examples/\">Examples</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://www.prisma.io/blog\">Blog</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://pris.ly/discord?utm_source=github&utm_medium=prisma&utm_content=repo_readme\">Discord</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://pris.ly/x?utm_source=github&utm_medium=prisma&utm_content=repo_readme\">Twitter</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://pris.ly/youtube?utm_source=github&utm_medium=prisma&utm_content=repo_readme\">Youtube</a>\n  <br />\n  <hr />\n</div>\n\n## What is Prisma?\n\nPrisma ORM is a **next-generation ORM** that consists of these tools:\n\n- [**Prisma Client**](https://www.prisma.io/docs/concepts/components/prisma-client): Auto-generated and type-safe query builder for Node.js & TypeScript\n- [**Prisma Migrate**](https://www.prisma.io/docs/concepts/components/prisma-migrate): Declarative data modeling & migration system\n- [**Prisma Studio**](https://github.com/prisma/studio): GUI to view and edit data in your database\n\nPrisma Client can be used in _any_ Node.js or TypeScript backend application (including serverless applications and microservices). This can be a [REST API](https://www.prisma.io/docs/concepts/overview/prisma-in-your-stack/rest), a [GraphQL API](https://www.prisma.io/docs/concepts/overview/prisma-in-your-stack/graphql), a gRPC API, or anything else that needs a database.\n\n**If you need a database to use with Prisma ORM, check out [Prisma Postgres](https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres?utm_source=github&utm_medium=prisma-readme).**\n\n## Getting started\n\n### Quickstart (5min)\n\nThe fastest way to get started with Prisma is by following the quickstart guides. You can choose either of two databases:\n\n- [Prisma Postgres](https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres)\n- [SQLite](https://www.prisma.io/docs/getting-started/quickstart-sqlite)\n\n### Bring your own database\n\nIf you already have your own database, you can follows these guides:\n\n- [Add Prisma to an existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql)\n- [Set up a new project with Prisma from scratch](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql)\n\n## How Prisma ORM works\n\nThis section provides a high-level overview of how Prisma ORM works and its most important technical components. For a more thorough introduction, visit the [Prisma documentation](https://www.prisma.io/docs/).\n\n### The Prisma schema\n\nEvery project that uses a tool from the Prisma toolkit starts with a [Prisma schema file](https://www.prisma.io/docs/concepts/components/prisma-schema). The Prisma schema allows developers to define their _application models_ in an intuitive data modeling language. It also contains the connection to a database and defines a _generator_:\n\n```prisma\n// Data source\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Generator\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// Data model\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields:  [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\nIn this schema, you configure three things:\n\n- **Data source**: Specifies your database connection (via an environment variable)\n- **Generator**: Indicates that you want to generate Prisma Client\n- **Data model**: Defines your application models\n\n---\n\n### The Prisma data model\n\nOn this page, the focus is on the data model. You can learn more about [Data sources](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/data-sources) and [Generators](https://www.prisma.io/docs/reference/tool... [truncated]"},"repo_name":{"type":"string","value":"prisma"},"author":{"type":"string","value":"prisma"},"topics":{"type":"array","id":1,"value":[{"type":"string","value":"cockroachdb"},{"type":"string","value":"database"},{"type":"string","value":"javascript"},{"type":"string","value":"mariadb"},{"type":"string","value":"mongo"},{"type":"string","value":"mongodb"},{"type":"string","value":"mongodb-orm"},{"type":"string","value":"mssql"},{"type":"string","value":"mysql"},{"type":"string","value":"nodejs"},{"type":"string","value":"orm"},{"type":"string","value":"postgres"},{"type":"string","value":"postgresql"},{"type":"string","value":"prisma"},{"type":"string","value":"prisma-client"},{"type":"string","value":"query-builder"},{"type":"string","value":"sql-server"},{"type":"string","value":"sqlite"},{"type":"string","value":"sqlserver"},{"type":"string","value":"typescript"}]},"language":{"type":"string","value":"TypeScript"},"stargazers_count":{"type":"number","value":"41900"},"forks_count":{"type":"number","value":"1715"}}}