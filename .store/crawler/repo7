{"type":"object","id":0,"value":{"url":{"type":"string","value":"https://github.com/grab/front-end-guide"},"repo_id":{"type":"string","value":"grab/front-end-guide"},"readme":{"type":"string","value":"Grab Front End Guide\n==\n\n[![Front End Developer Desk](images/desk.png)](https://dribbble.com/shots/3577639-Isometric-Developer-Desk)\n\n_Credits: [Illustration](https://dribbble.com/shots/3577639-Isometric-Developer-Desk) by [@yangheng](https://dribbble.com/yangheng)_\n\n_This guide has been cross-posted on [Free Code Camp](https://medium.freecodecamp.com/grabs-front-end-guide-for-large-teams-484d4033cc41)._\n\n[Grab](https://www.grab.com) is Southeast Asia (SEA)'s leading transportation platform and our mission is to drive SEA forward, leveraging on the latest technology and the talented people we have in the company. As of May 2017, we handle [2.3 million rides daily](https://www.bloomberg.com/news/videos/2017-05-11/tans-says-company-has-more-than-850-000-drivers-video) and we are growing and hiring at a rapid scale.\n\nTo keep up with Grab's phenomenal growth, our web team and web platforms have to grow as well. Fortunately, or unfortunately, at Grab, the web team has been [keeping up](https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22) with the latest best practices and has incorporated the modern JavaScript ecosystem in our web apps.\n\nThe result of this is that our new hires or back end engineers, who are not necessarily well-acquainted with the modern JavaScript ecosystem, may feel overwhelmed by the barrage of new things that they have to learn just to complete their feature or bug fix in a web app. Front end development has never been so complex and exciting as it is today. New tools, libraries, frameworks and plugins emerge every other day and there is so much to learn. It is imperative that newcomers to the web team are guided to embrace this evolution of the front end, learn to navigate the ecosystem with ease, and get productive in shipping code to our users as fast as possible. We have come up with a study guide to introduce why we do what we do, and how we handle front end at scale.\n\nThis study guide is inspired by [\"A Study Plan to Cure JavaScript Fatigue\"](https://medium.freecodecamp.com/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1#.g9egaapps) and is mildly opinionated in the sense that we recommend certain libraries/frameworks to learn for each aspect of front end development, based on what is currently deemed most suitable at Grab. We explain why a certain library/framework/tool is chosen and provide links to learning resources to enable the reader to pick it up on their own. Alternative choices that may be better for other use cases are provided as well for reference and further self-exploration.\n\nIf you are familiar with front end development and have been consistently keeping up with the latest developments, this guide will probably not be that useful to you. It is targeted at newcomers to front end.\n\nIf your company is exploring a modern JavaScript stack as well, you may find this study plan useful to your company too! Feel free to adapt it to your needs. We will update this study plan periodically, according to our latest work and choices.\n\n*- Grab Web Team*\n\n**Pre-requisites**\n\n- Good understanding of core programming concepts.\n- Comfortable with basic command line actions and familiarity with source code version control systems such as Git.\n- Experience in web development. Have built server-side rendered web apps using frameworks like Ruby on Rails, Django, Express, etc.\n- Understanding of how the web works. Familiarity with web protocols and conventions like HTTP and RESTful APIs.\n\n### Table of Contents\n\n- [Single-page Apps (SPAs)](#single-page-apps-spas)\n- [New-age JavaScript](#new-age-javascript)\n- [User Interface](#user-interface---react)\n- [State Management](#state-management---fluxredux)\n- [Coding with Style](#coding-with-style---css-modules)\n- [Maintainability](#maintainability)\n  - [Testing](#testing---jest--enzyme)\n  - [Linting JavaScript](#linting-javascript---eslint)\n  - [Linting CSS](#linting-css---stylelint)\n  - [Formatting Code](#formatting-code---prettier)\n  - [Types](#types---flow)\n- [Build System](#build-system---webpack)\n- [Package Management](#package-management---yarn)\n- [Continuous Integration](#continuous-integration)\n- [Hosting and CDN](#hosting-and-cdn)\n- [Deployment](#deployment)\n- [Monitoring](#monitoring)\n\nCertain topics can be skipped if you have prior experience in them.\n\n## Single-page Apps (SPAs)\n\nWeb developers these days refer to the products they build as web apps, rather than websites. While there is no strict difference between the two terms, web apps tend to be highly interactive and dynamic, allowing the user to perform actions and receive a response for their action. Traditionally, the browser receives HTML from the server and renders it. When the user navigates to another URL, a full-page refresh is required and the server sends fresh new HTML for the new page. This is called server-side rendering.\n\nHowever in modern SPAs, client-side rendering is used instead. The browser loads the initial page from the server, along with the scrip... [truncated]"},"repo_name":{"type":"string","value":"front-end-guide"},"author":{"type":"string","value":"grab"},"topics":{"type":"array","id":1,"value":[{"type":"string","value":"babel"},{"type":"string","value":"css"},{"type":"string","value":"css-modules"},{"type":"string","value":"engineering"},{"type":"string","value":"eslint"},{"type":"string","value":"flowtype"},{"type":"string","value":"front-end"},{"type":"string","value":"grab"},{"type":"string","value":"javascript"},{"type":"string","value":"jest"},{"type":"string","value":"react"},{"type":"string","value":"redux"},{"type":"string","value":"study-plan"},{"type":"string","value":"stylelint"},{"type":"string","value":"webpack"},{"type":"string","value":"yarn"}]},"language":{"type":"string","value":"JavaScript"},"stargazers_count":{"type":"number","value":"15212"},"forks_count":{"type":"number","value":"1123"}}}