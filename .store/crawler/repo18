{"type":"object","id":0,"value":{"url":{"type":"string","value":"https://github.com/nodemcu/nodemcu-firmware"},"repo_id":{"type":"string","value":"nodemcu/nodemcu-firmware"},"readme":{"type":"string","value":"# NodeMCU 3.0.0\n> Lua-based firmware for ESP8266 WiFi SOC\n\n[![Join the chat at https://gitter.im/nodemcu/nodemcu-firmware](https://img.shields.io/gitter/room/badges/shields.svg)](https://gitter.im/nodemcu/nodemcu-firmware?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![CI](https://github.com/nodemcu/nodemcu-firmware/actions/workflows/build.yml/badge.svg)](https://github.com/nodemcu/nodemcu-firmware/actions/workflows/build.yml)\n[![Documentation Status](https://img.shields.io/badge/docs-release-yellow.svg?style=flat)](http://nodemcu.readthedocs.io/en/release/)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)](#license)\n\nNodeMCU is an open source [Lua](https://www.lua.org/) based firmware for the [ESP8266 WiFi SOC from Espressif](https://www.espressif.com/en/products/socs/esp8266) and uses an on-module flash-based [SPIFFS](https://github.com/pellepl/spiffs) file system. NodeMCU is implemented in C and is layered on the [Espressif NON-OS SDK](https://github.com/espressif/ESP8266_NONOS_SDK).\n\nThe firmware was initially developed as is a companion project to the popular ESP8266-based [NodeMCU development modules]((https://github.com/nodemcu/nodemcu-devkit-v1.0)), but the project is now community-supported, and the firmware can now be run on _any_ ESP module.\n\n## Summary\n\n- Easy to program wireless node and/or access point\n- Based on Lua 5.1.4 or Lua 5.3 but without `debug`, `io`, `os` and (most of the) `math` modules\n- Asynchronous event-driven programming model\n- More than **70 built-in C modules** and **close to 20 Lua modules**\n- Firmware available with or without floating point support (integer-only uses less memory)\n- Up-to-date documentation at [https://nodemcu.readthedocs.io](https://nodemcu.readthedocs.io)\n\n### LFS support\n\nIn July 2018 support for a Lua Flash Store (LFS) was introduced. LFS  allows Lua code and its associated constant data to be executed directly out of flash-memory; just as the firmware itself is executed. This now enables NodeMCU developers to create **Lua applications with up to 256Kb** Lua code and read-only constants executing out of flash. All of the RAM is available for read-write data!\n\n## Programming Model\n\nThe NodeMCU programming model is similar to that of [Node.js](https://en.wikipedia.org/wiki/Node.js), only in Lua. It is asynchronous and event-driven. Many functions, therefore, have parameters for callback functions. To give you an idea what a NodeMCU program looks like study the short snippets below. For more extensive examples have a look at the [`/lua_examples`](lua_examples) folder in the repository on GitHub.\n\n```lua\n-- a simple HTTP server\nsrv = net.createServer(net.TCP)\nsrv:listen(80, function(conn)\n\tconn:on(\"receive\", function(sck, payload)\n\t\tprint(payload)\n\t\tsck:send(\"HTTP/1.0 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1> Hello, NodeMCU.</h1>\")\n\tend)\n\tconn:on(\"sent\", function(sck) sck:close() end)\nend)\n```\n```lua\n-- connect to WiFi access point\nwifi.setmode(wifi.STATION)\nwifi.sta.config{ssid=\"SSID\", pwd=\"password\"}\n```\n\n## Documentation\n\nThe entire [NodeMCU documentation](https://nodemcu.readthedocs.io) is maintained right in this repository at [/docs](docs). The fact that the API documentation is maintained in the same repository as the code that *provides* the API ensures consistency between the two. With every commit the documentation is rebuilt by Read the Docs and thus transformed from terse Markdown into a nicely browsable HTML site at [https://nodemcu.readthedocs.io](https://nodemcu.readthedocs.io).\n\n\nPages:\n\n- How to [build the firmware](https://nodemcu.readthedocs.io/en/release/build/)\n- How to [flash the firmware](https://nodemcu.readthedocs.io/en/release/flash/)\n- How to [upload code and NodeMCU IDEs](https://nodemcu.readthedocs.io/en/release/upload/)\n- API documentation for every module\n\n\n## Releases\n\nDue to the ever-growing number of modules available within NodeMCU, pre-built binaries are no longer made available. Use the automated [custom firmware build service](http://nodemcu-build.com/) to get the specific firmware configuration you need, or consult the [documentation](http://nodemcu.readthedocs.io/en/release/build/) for other options to build your own firmware.\n\nThis project uses two main branches, `release` and `dev`. `dev` is actively worked on and it's also where PRs should be created against. `release` thus can be considered \"stable\" even though there are no automated regression tests. The goal is to merge back to `release` roughly every 2 months. Depending on the current \"heat\" (issues, PRs) we accept changes to `dev` for 5-6 weeks and then hold back for 2-3 weeks before the next snap is completed.\n\nA new tag is created every time the `dev` branch is merged back to `release`. They are listed in this repo's [releases](https://github.com/nodemcu/nodemcu-firmware/releases).\n\nTag names follow the `<SDK-version>-release_yyyymmdd` pattern.\n\n## Support\n\nSee [https://nodemcu.readthedocs.io/en/rel... [truncated]"},"repo_name":{"type":"string","value":"nodemcu-firmware"},"author":{"type":"string","value":"nodemcu"},"topics":{"type":"array","id":1,"value":[{"type":"string","value":"esp32"},{"type":"string","value":"esp8266"},{"type":"string","value":"esp8285"},{"type":"string","value":"espressif"},{"type":"string","value":"firmware"},{"type":"string","value":"lua"},{"type":"string","value":"nodemcu"},{"type":"string","value":"spiffs"}]},"language":{"type":"string","value":"C"},"stargazers_count":{"type":"number","value":"7762"},"forks_count":{"type":"number","value":"3130"}}}