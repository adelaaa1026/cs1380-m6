{"type":"object","id":0,"value":{"url":{"type":"string","value":"https://github.com/prettier/eslint-config-prettier"},"repo_id":{"type":"string","value":"prettier/eslint-config-prettier"},"readme":{"type":"string","value":"# eslint-config-prettier\n\nTurns off all rules that are unnecessary or might conflict with [Prettier].\n\nThis lets you use your favorite shareable config without letting its stylistic choices get in the way when using Prettier.\n\nNote that this config _only_ turns rules _off,_ so it only makes sense using it together with some other config.\n\n[prettier]: https://github.com/prettier/prettier\n\n## Installation\n\n1. Install eslint-config-prettier:\n\n   ```shell\n   npm i -D eslint-config-prettier\n   ```\n\n   ```shell\n   yarn add -D eslint-config-prettier\n   ```\n\n   ```shell\n   pnpm add -D eslint-config-prettier\n   ```\n\n   ```shell\n   bun add -D eslint-config-prettier\n   ```\n\n2. Add eslint-config-prettier to your ESLint configuration ‚Äì either to [eslintrc] or to [eslint.config.js (flat config)].\n\n   - eslintrc: Add `\"prettier\"` to the \"extends\" array in your `.eslintrc.*` file. Make sure to put it **last,** so it gets the chance to override other configs.\n\n     <!-- prettier-ignore -->\n     ```json\n     {\n       \"extends\": [\n         \"some-other-config-you-use\",\n         \"prettier\"\n       ]\n     }\n     ```\n\n   - eslint.config.js (flat config): Import eslint-config-prettier, and put it in the configuration array ‚Äì **after** other configs that you want to override.\n\n     <!-- prettier-ignore -->\n     ```js\n     import someConfig from \"some-other-config-you-use\";\n     // Note the `/flat` suffix here, the difference from default entry is that\n     // `/flat` added `name` property to the exported object to improve\n     // [config-inspector](https://eslint.org/blog/2024/04/eslint-config-inspector/) experience.\n     import eslintConfigPrettier from \"eslint-config-prettier/flat\";\n\n     export default [\n       someConfig,\n       eslintConfigPrettier,\n     ];\n     ```\n\n3. Finally, run the [CLI helper tool](#cli-helper-tool) to find problems in the `\"rules\"` sections of your config.\n\n> üëâ Using [eslint-plugin-prettier]? Check out [eslint-plugin-prettier‚Äôs recommended config][eslint-plugin-prettier-recommended].\n\n### Plugins\n\neslint-config-prettier not only turns off _core_ rules, but also some from these plugins automatically:\n\n- [@babel/eslint-plugin]\n- [@stylistic/eslint-plugin]\n- [@typescript-eslint/eslint-plugin]\n- [eslint-plugin-babel]\n- [eslint-plugin-flowtype]\n- [eslint-plugin-react]\n- [eslint-plugin-standard]\n- [eslint-plugin-unicorn]\n- [eslint-plugin-vue]\n\n> ‚ÑπÔ∏è Note: You might find guides on the Internet saying you should also extend stuff like `\"prettier/react\"`. Since version 8.0.0 of eslint-config-prettier, all you need to extend is `\"prettier\"`! That includes all plugins.\n\n#### eslint.config.js (flat config) plugin caveat\n\nWith flat config, _you_ get to decide the plugin name! For example:\n\n```js\nimport typescriptEslint from \"@typescript-eslint/eslint-plugin\";\nimport eslintConfigPrettier from \"eslint-config-prettier/flat\";\n\nexport default [\n  {\n    plugins: {\n      // You‚Äôd typically use one of the following two:\n      // typescriptEslint: typescriptEslint,\n      // typescriptEslint,\n      // But in this example we give it another name.\n      // It might be tempting to use something shorter like ‚Äúts‚Äù:\n      ts: typescriptEslint, // üö® Don‚Äôt do this!\n    },\n    rules: {\n      // With eslintrc, this is _always_ called:\n      // @typescript-eslint/indent\n      // But in eslint.config.js (flat config), the name chosen above in `plugins` is used.\n      \"ts/indent\": \"error\", // üö® Don‚Äôt do this!\n    },\n  },\n  eslintConfigPrettier,\n];\n```\n\nYou might expect eslint-config-prettier to turn off `ts/indent`, but it won‚Äôt! Because eslint-config-prettier only turns off `@typescript-eslint/indent`. It cannot know what you chose to call the plugin. Same thing for the CLI helper tool.\n\nSimply stick to the official plugin names and you‚Äôll be all good.\n\nIf you encounter a shared _config_ that uses a non-standard plugin name, please ask them to use the standard name instead.\n\n### Excluding deprecated rules\n\nSome of the rules that eslint-config-prettier turns off may be deprecated, or even removed from ESLint. **This is perfectly fine,** but if you really need to omit the deprecated and removed rules, you can do so by setting the `ESLINT_CONFIG_PRETTIER_NO_DEPRECATED` environment variable to a non-empty value. For example:\n\n```\nenv ESLINT_CONFIG_PRETTIER_NO_DEPRECATED=true npx eslint-find-rules --deprecated index.js\n```\n\n## CLI helper tool\n\neslint-config-prettier also ships with a little CLI tool to help you check if your configuration contains any rules that are unnecessary or conflict with Prettier. Here‚Äôs how to run it:\n\n```\nnpx eslint-config-prettier path/to/main.js\n```\n\n(Change `path/to/main.js` to a file that exists in your project.)\n\n### What and why\n\nNow, let‚Äôs have a look at what it does and why you might want to use it.\n\nüö® This eslintrc example has a **conflicting rule** `\"indent\"` enabled:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"extends\": [\n    \"some-other-config-you-use\",\n    \"prettier\"\n  ],\n  \"rules\": {\n    \"indent\": \"error\"\n... [truncated]"},"repo_name":{"type":"string","value":"eslint-config-prettier"},"author":{"type":"string","value":"prettier"},"topics":{"type":"array","id":1,"value":[{"type":"string","value":"eslint"},{"type":"string","value":"eslint-config"},{"type":"string","value":"prettier"},{"type":"string","value":"react"}]},"language":{"type":"string","value":"JavaScript"},"stargazers_count":{"type":"number","value":"5652"},"forks_count":{"type":"number","value":"252"}}}