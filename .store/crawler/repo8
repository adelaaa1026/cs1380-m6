{"type":"object","id":0,"value":{"url":{"type":"string","value":"https://github.com/lint-staged/lint-staged"},"repo_id":{"type":"string","value":"lint-staged/lint-staged"},"readme":{"type":"string","value":"# 🚫💩 lint-staged\n\n[![npm version](https://badge.fury.io/js/lint-staged.svg)](https://badge.fury.io/js/lint-staged)\n\n---\n\nRun tasks like formatters and linters against staged git files and don't let :poop: slip into your code base!\n\n```bash\nnpm install --save-dev lint-staged # requires further setup\n```\n\n```\n$ git commit\n\n✔ Backed up original state in git stash (5bda95f)\n❯ Running tasks for staged files...\n  ❯ packages/frontend/.lintstagedrc.json — 1 file\n    ↓ *.js — no files [SKIPPED]\n    ❯ *.{json,md} — 1 file\n      ⠹ prettier --write\n  ↓ packages/backend/.lintstagedrc.json — 2 files\n    ❯ *.js — 2 files\n      ⠼ eslint --fix\n    ↓ *.{json,md} — no files [SKIPPED]\n◼ Applying modifications from tasks...\n◼ Cleaning up temporary files...\n```\n\n<details>\n<summary>See asciinema video</summary>\n\n[![asciicast](https://asciinema.org/a/199934.svg)](https://asciinema.org/a/199934)\n\n</details>\n\n## Why\n\nCode quality tasks like formatters and linters make more sense when run before committing your code. By doing so you can ensure no errors go into the repository and enforce code style. But running a task on a whole project can be slow, and opinionated tasks such as linting can sometimes produce irrelevant results. Ultimately you only want to check files that will be committed.\n\nThis project contains a script that will run arbitrary shell tasks with a list of staged files as an argument, filtered by a specified glob pattern.\n\n## Related blog posts and talks\n\n- [Introductory Medium post - Andrey Okonetchnikov, 2016](https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8#.8qepn2b5l)\n- [Running Jest Tests Before Each Git Commit - Ben McCormick, 2017](https://benmccormick.org/2017/02/26/running-jest-tests-before-each-git-commit/)\n- [AgentConf presentation - Andrey Okonetchnikov, 2018](https://www.youtube.com/watch?v=-mhY7e-EsC4)\n- [SurviveJS interview - Juho Vepsäläinen and Andrey Okonetchnikov, 2018](https://survivejs.com/blog/lint-staged-interview/)\n- [Prettier your CSharp with `dotnet-format` and `lint-staged`](https://johnnyreilly.com/2020/12/22/prettier-your-csharp-with-dotnet-format-and-lint-staged)\n\n> If you've written one, please submit a PR with the link to it!\n\n## Installation and setup\n\nTo install _lint-staged_ in the recommended way, you need to:\n\n1. Install _lint-staged_ itself:\n   - `npm install --save-dev lint-staged`\n1. Set up the `pre-commit` git hook to run _lint-staged_\n   - [Husky](https://github.com/typicode/husky) is a popular choice for configuring git hooks\n   - Read more about git hooks [here](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)\n1. Install some tools like [ESLint](https://eslint.org) or [Prettier](https://prettier.io)\n1. Configure _lint-staged_ to run code checkers and other tasks:\n   - for example: `{ \"*.js\": \"eslint\" }` to run ESLint for all staged JS files\n   - See [Configuration](#configuration) for more info\n\nDon't forget to commit changes to `package.json` and `.husky` to share this setup with your team!\n\nNow change a few files, `git add` or `git add --patch` some of them to your commit, and try to `git commit` them.\n\nSee [examples](#examples) and [configuration](#configuration) for more information.\n\n> [!CAUTION]  \n> _Lint-staged_ runs `git` operations affecting the files in your repository. By default _lint-staged_ creates a `git stash` as a backup of the original state before running any configured tasks to help prevent data loss.\n\n## Changelog\n\nSee [Releases](https://github.com/okonet/lint-staged/releases).\n\n### Migration\n\n#### v15\n\n- Since `v15.0.0` _lint-staged_ no longer supports Node.js 16. Please upgrade your Node.js version to at least `18.12.0`.\n\n#### v14\n\n- Since `v14.0.0` _lint-staged_ no longer supports Node.js 14. Please upgrade your Node.js version to at least `16.14.0`.\n\n#### v13\n\n- Since `v13.0.0` _lint-staged_ no longer supports Node.js 12. Please upgrade your Node.js version to at least `14.13.1`, or `16.0.0` onward.\n- Version `v13.3.0` was incorrectly released including code of version `v14.0.0`. This means the breaking changes of `v14` are also included in `v13.3.0`, the last `v13` version released\n\n#### v12\n\n- Since `v12.0.0` _lint-staged_ is a pure ESM module, so make sure your Node.js version is at least `12.20.0`, `14.13.1`, or `16.0.0`. Read more about ESM modules from the official [Node.js Documentation site here](https://nodejs.org/api/esm.html#introduction).\n\n#### v10\n\n- From `v10.0.0` onwards any new modifications to originally staged files will be automatically added to the commit.\n  If your task previously contained a `git add` step, please remove this.\n  The automatic behaviour ensures there are less race-conditions,\n  since trying to run multiple git operations at the same time usually results in an error.\n- From `v10.0.0` onwards, lint-staged uses git stashes to improve speed and provide backups while running.\n  Since git stashes require at least an initial commit, you shouldn't run lint-staged in an empty repo.\n- From... [truncated]"},"repo_name":{"type":"string","value":"lint-staged"},"author":{"type":"string","value":"lint-staged"},"topics":{"type":"array","id":1,"value":[{"type":"string","value":"developer-experience"},{"type":"string","value":"eslint"},{"type":"string","value":"git"},{"type":"string","value":"linter"},{"type":"string","value":"stage-files"},{"type":"string","value":"stylelint"},{"type":"string","value":"workflow"}]},"language":{"type":"string","value":"JavaScript"},"stargazers_count":{"type":"number","value":"13791"},"forks_count":{"type":"number","value":"436"}}}