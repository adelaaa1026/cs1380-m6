{"type":"object","id":0,"value":{"url":{"type":"string","value":"https://github.com/nvim-tree/nvim-tree.lua"},"repo_id":{"type":"string","value":"nvim-tree/nvim-tree.lua"},"readme":{"type":"string","value":"# A File Explorer For Neovim Written In Lua\n\n[![CI](https://github.com/nvim-tree/nvim-tree.lua/actions/workflows/ci.yml/badge.svg)](https://github.com/nvim-tree/nvim-tree.lua/actions/workflows/ci.yml)\n\n<img align=\"left\" width=\"199\" height=\"598\" src=\"https://user-images.githubusercontent.com/1505378/232662694-8dc494e0-24da-497a-8541-29344293378c.png\">\n<img align=\"left\" width=\"199\" height=\"598\" src=\"https://user-images.githubusercontent.com/1505378/232662698-2f321315-c67a-486b-85d8-8c391de52392.png\">\n\n   Automatic updates\n\n   File type icons\n\n   Git integration\n\n   Diagnostics integration: LSP and COC\n\n   (Live) filtering\n\n   Cut, copy, paste, rename, delete, create\n\n   Highly customisable\n\n<br clear=\"left\"/>\n<br />\n\nTake a look at the [wiki](https://github.com/nvim-tree/nvim-tree.lua/wiki) for Showcases, Tips, Recipes and more.\n\nQuestions and general support: [Discussions](https://github.com/nvim-tree/nvim-tree.lua/discussions)\n\n## Requirements\n\n[neovim >=0.9.0](https://github.com/neovim/neovim/wiki/Installing-Neovim)\n\n[nvim-web-devicons](https://github.com/nvim-tree/nvim-web-devicons) is optional and used to display file icons. It requires a [patched font](https://www.nerdfonts.com/). Your terminal emulator must be configured to use that font, usually \"Hack Nerd Font\"\n\n## Install\n\nPlease install via your preferred package manager. See [Installation](https://github.com/nvim-tree/nvim-tree.lua/wiki/Installation) for specific package manager instructions.\n\n`nvim-tree/nvim-tree.lua`\n\nMajor or minor versions may be specified via tags: `v<MAJOR>` e.g. `v1` or `v<MAJOR>.<MINOR>` e.g. `v1.23`\n\n`nvim-tree/nvim-web-devicons` optional, for file icons\n\nDisabling [netrw](https://neovim.io/doc/user/pi_netrw.html) is strongly advised, see [:help nvim-tree-netrw](doc/nvim-tree-lua.txt)\n\n## Quick Start\n\n### Setup\n\nSetup the plugin in your `init.lua`\n\n```lua\n-- disable netrw at the very start of your init.lua\nvim.g.loaded_netrw = 1\nvim.g.loaded_netrwPlugin = 1\n\n-- optionally enable 24-bit colour\nvim.opt.termguicolors = true\n\n-- empty setup using defaults\nrequire(\"nvim-tree\").setup()\n\n-- OR setup with some options\nrequire(\"nvim-tree\").setup({\n  sort = {\n    sorter = \"case_sensitive\",\n  },\n  view = {\n    width = 30,\n  },\n  renderer = {\n    group_empty = true,\n  },\n  filters = {\n    dotfiles = true,\n  },\n})\n```\n\n### Help\n\nOpen the tree:  `:NvimTreeOpen`\n\nShow the mappings:  `g?`\n\n### Custom Mappings\n\n[:help nvim-tree-mappings-default](doc/nvim-tree-lua.txt) are applied by default however you may customise via |nvim-tree.on_attach| e.g.\n\n```lua\nlocal function my_on_attach(bufnr)\n  local api = require \"nvim-tree.api\"\n\n  local function opts(desc)\n    return { desc = \"nvim-tree: \" .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }\n  end\n\n  -- default mappings\n  api.config.mappings.default_on_attach(bufnr)\n\n  -- custom mappings\n  vim.keymap.set('n', '<C-t>', api.tree.change_root_to_parent,        opts('Up'))\n  vim.keymap.set('n', '?',     api.tree.toggle_help,                  opts('Help'))\nend\n\n-- pass to setup along with your other options\nrequire(\"nvim-tree\").setup {\n  ---\n  on_attach = my_on_attach,\n  ---\n}\n```\n\n### Highlight\n\nRun `:NvimTreeHiTest` to show all the highlights that nvim-tree uses.\n\nThey can be customised before or after setup is called and will be immediately\napplied at runtime. e.g.\n\n```lua\nvim.cmd([[\n    :hi      NvimTreeExecFile    guifg=#ffa0a0\n    :hi      NvimTreeSpecialFile guifg=#ff80ff gui=underline\n    :hi      NvimTreeSymlink     guifg=Yellow  gui=italic\n    :hi link NvimTreeImageFile   Title\n]])\n```\nSee [:help nvim-tree-highlight](doc/nvim-tree-lua.txt) for details.\n\n## Commands\n\nSee [:help nvim-tree-commands](doc/nvim-tree-lua.txt)\n\nBasic commands:\n\n`:NvimTreeToggle` Open or close the tree. Takes an optional path argument.\n\n`:NvimTreeFocus` Open the tree if it is closed, and then focus on the tree.\n\n`:NvimTreeFindFile` Move the cursor in the tree for the current buffer, opening folders if needed.\n\n`:NvimTreeCollapse` Collapses the nvim-tree recursively.\n\n## Roadmap\n\nnvim-tree is stable and new major features will not be added. The focus is on existing user experience.\n\nUsers are encouraged to add their own custom features via the public [API](#api).\n\nDevelopment is focused on:\n* Bug fixes\n* Performance\n* Quality of Life improvements\n* API / Events\n* Enhancements to existing features\n\n## API\n\nnvim-tree exposes a public API. This is non breaking, with additions made as necessary. See [:help nvim-tree-api](doc/nvim-tree-lua.txt)\n\nSee wiki [Recipes](https://github.com/nvim-tree/nvim-tree.lua/wiki/Recipes) and [Tips](https://github.com/nvim-tree/nvim-tree.lua/wiki/Tips) for ideas and inspiration.\n\nPlease raise a [feature request](https://github.com/nvim-tree/nvim-tree.lua/issues/new?assignees=&labels=feature+request&template=feature_request.md&title=) if the API is insufficient for your needs. Contributions are always welcome, see below.\n\nYou may also subscribe to events that nvim-tree... [truncated]"},"repo_name":{"type":"string","value":"nvim-tree.lua"},"author":{"type":"string","value":"nvim-tree"},"topics":{"type":"array","id":1,"value":[{"type":"string","value":"file-explorer"},{"type":"string","value":"lua"},{"type":"string","value":"neovim"}]},"language":{"type":"string","value":"Lua"},"stargazers_count":{"type":"number","value":"7712"},"forks_count":{"type":"number","value":"616"}}}